#include <iostream>
#include <sstream>
#include <thread>

#include "midifile/MidiFile.h"
#include "res/SuperMario.mid.h"
#include "res/quanyecha.mid.h"
#include "res/twinkle.mid.h"
#include "fre_table.h"

using namespace smf;
using namespace std;

//int melody[267]={0, 523, 466, 0, 440, 349, 392, 0, 392, 0, 587, 0, 523, 0, 466, 0, 440, 0, 440, 0, 523, 0, 466, 0, 440, 392, 0, 392, 0, 932, 880, 932, 880, 932, 392, 0, 392, 932, 880, 932, 880, 932, 392, 0, 392, 587, 523, 0, 466, 0, 440, 0, 440, 440, 0, 523, 0, 466, 0, 440, 0, 392, 0, 392, 0, 932, 880, 932, 0, 880, 932, 392, 0, 392, 932, 0, 880, 932, 0, 880, 932, 392, 0, 392, 587, 0, 523, 0, 466, 0, 440, 0, 440, 0, 523, 0, 466, 0, 440, 0, 392, 0, 392, 0, 932, 880, 0, 932, 880, 0, 932, 392, 0, 392, 0, 932, 880, 0, 932, 880, 932, 0, 466, 466, 466, 466, 0, 587, 587, 587, 587, 523, 523, 523, 523, 698, 698, 698, 698, 0, 784, 784, 784, 784, 784, 784, 784, 784, 784, 784, 784, 784, 0, 523, 466, 440, 349, 392, 0, 392, 0, 587, 0, 523, 0, 466, 0, 440, 0, 440, 0, 440, 523, 0, 466, 0, 440, 0, 392, 0, 392, 0, 932, 880, 932, 880, 0, 932, 392, 0, 392, 932, 880, 932, 880, 932, 392, 0, 392, 587, 523, 0, 466, 0, 440, 0, 440, 0, 523, 0, 466, 0, 440, 0, 392, 0, 392, 932, 0, 880, 932, 0, 880, 0, 932, 392, 0, 392, 0, 932, 0, 880, 932, 0, 880, 932, 466, 466, 466, 466, 587, 587, 587, 587, 523, 523, 523, 523, 0, 698, 698, 698, 698, 0, 784, 784, 784, 784, 784, 784, 784, 784, 784, 784, 784, 784};
//int noteDurations[267]={9000, 375, 281, 94, 281, 469, 375, 188, 281, 94, 281, 188, 375, 375, 281, 469, 375, 281, 375, 375, 375, 281, 281, 94, 375, 469, 94, 375, 94, 375, 375, 281, 375, 375, 375, 281, 375, 375, 375, 375, 281, 469, 375, 281, 375, 281, 562, 188, 375, 375, 469, 188, 375, 375, 94, 375, 281, 281, 94, 281, 94, 375, 281, 281, 94, 281, 375, 281, 94, 375, 469, 375, 188, 375, 281, 94, 375, 281, 94, 281, 469, 469, 188, 281, 375, 94, 469, 188, 375, 375, 375, 281, 469, 188, 469, 375, 375, 94, 281, 94, 375, 94, 375, 94, 281, 375, 94, 281, 281, 94, 562, 375, 94, 375, 94, 281, 281, 94, 281, 375, 562, 94, 375, 281, 375, 281, 94, 281, 375, 281, 281, 375, 375, 375, 375, 281, 281, 375, 281, 94, 375, 375, 375, 375, 281, 281, 281, 375, 375, 375, 375, 375, 94, 375, 375, 375, 281, 375, 375, 281, 94, 281, 94, 375, 281, 375, 375, 469, 281, 281, 94, 281, 375, 375, 281, 94, 281, 94, 375, 281, 281, 94, 281, 375, 375, 281, 94, 375, 375, 281, 375, 375, 281, 375, 375, 469, 375, 281, 281, 375, 469, 281, 375, 281, 469, 281, 469, 281, 375, 281, 375, 94, 281, 94, 375, 188, 375, 375, 94, 281, 281, 94, 281, 94, 469, 375, 94, 281, 188, 281, 94, 281, 375, 94, 281, 375, 375, 375, 375, 375, 281, 375, 281, 375, 375, 375, 281, 375, 94, 375, 375, 281, 375, 94, 375, 281, 375, 281, 375, 375, 281, 281, 281, 375, 281};

// SuperMario.mid
float melody[1200]={0, 659.255, 0, 659.255, 0, 659.255, 0, 659.255, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 659.255, 0, 659.255, 0, 783.991, 0, 783.991, 0, 523.251, 0, 523.251, 0, 391.995, 0, 391.995, 0, 329.628, 0, 329.628, 0, 440.0, 0, 440.0, 0, 493.883, 0, 493.883, 0, 466.164, 0, 466.164, 0, 440.0, 0, 440.0, 0, 391.995, 0, 391.995, 0, 659.255, 0, 659.255, 0, 783.991, 0, 783.991, 0, 880.0, 0, 880.0, 0, 698.456, 0, 698.456, 0, 783.991, 0, 783.991, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 493.883, 0, 493.883, 0, 523.251, 0, 523.251, 0, 391.995, 0, 391.995, 0, 329.628, 0, 329.628, 0, 440.0, 0, 440.0, 0, 493.883, 0, 493.883, 0, 466.164, 0, 466.164, 0, 440.0, 0, 440.0, 0, 391.995, 0, 391.995, 0, 659.255, 0, 659.255, 0, 783.991, 0, 783.991, 0, 880.0, 0, 880.0, 0, 698.456, 0, 698.456, 0, 783.991, 0, 783.991, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 493.883, 0, 493.883, 0, 783.991, 0, 783.991, 0, 739.989, 0, 739.989, 0, 698.456, 0, 698.456, 0, 622.254, 0, 622.254, 0, 659.255, 0, 659.255, 0, 415.305, 0, 415.305, 0, 440.0, 0, 440.0, 0, 523.251, 0, 523.251, 0, 440.0, 0, 440.0, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 783.991, 0, 783.991, 0, 739.989, 0, 739.989, 0, 698.456, 0, 698.456, 0, 622.254, 0, 622.254, 0, 659.255, 0, 659.255, 0, 1046.502, 0, 1046.502, 0, 1046.502, 0, 1046.502, 0, 1046.502, 0, 1046.502, 0, 783.991, 0, 783.991, 0, 739.989, 0, 739.989, 0, 698.456, 0, 698.456, 0, 622.254, 0, 622.254, 0, 659.255, 0, 659.255, 0, 415.305, 0, 415.305, 0, 440.0, 0, 440.0, 0, 523.251, 0, 523.251, 0, 440.0, 0, 440.0, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 622.254, 0, 622.254, 0, 587.33, 0, 587.33, 0, 523.251, 0, 523.251, 0, 783.991, 0, 783.991, 0, 739.989, 0, 739.989, 0, 698.456, 0, 698.456, 0, 622.254, 0, 622.254, 0, 659.255, 0, 659.255, 0, 415.305, 0, 415.305, 0, 440.0, 0, 440.0, 0, 523.251, 0, 523.251, 0, 440.0, 0, 440.0, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 783.991, 0, 783.991, 0, 739.989, 0, 739.989, 0, 698.456, 0, 698.456, 0, 622.254, 0, 622.254, 0, 659.255, 0, 659.255, 0, 1046.502, 0, 1046.502, 0, 1046.502, 0, 1046.502, 0, 1046.502, 0, 1046.502, 0, 783.991, 0, 783.991, 0, 739.989, 0, 739.989, 0, 698.456, 0, 698.456, 0, 622.254, 0, 622.254, 0, 659.255, 0, 659.255, 0, 415.305, 0, 415.305, 0, 440.0, 0, 440.0, 0, 523.251, 0, 523.251, 0, 440.0, 0, 440.0, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 622.254, 0, 622.254, 0, 587.33, 0, 587.33, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 440.0, 0, 440.0, 0, 391.995, 0, 391.995, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 440.0, 0, 440.0, 0, 391.995, 0, 391.995, 0, 659.255, 0, 659.255, 0, 659.255, 0, 659.255, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 659.255, 0, 659.255, 0, 783.991, 0, 783.991, 0, 523.251, 0, 523.251, 0, 391.995, 0, 391.995, 0, 329.628, 0, 329.628, 0, 440.0, 0, 440.0, 0, 493.883, 0, 493.883, 0, 466.164, 0, 466.164, 0, 440.0, 0, 440.0, 0, 391.995, 0, 391.995, 0, 659.255, 0, 659.255, 0, 783.991, 0, 783.991, 0, 880.0, 0, 880.0, 0, 698.456, 0, 698.456, 0, 783.991, 0, 783.991, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 493.883, 0, 493.883, 0, 523.251, 0, 523.251, 0, 391.995, 0, 391.995, 0, 329.628, 0, 329.628, 0, 440.0, 0, 440.0, 0, 493.883, 0, 493.883, 0, 466.164, 0, 466.164, 0, 440.0, 0, 440.0, 0, 391.995, 0, 391.995, 0, 659.255, 0, 659.255, 0, 783.991, 0, 783.991, 0, 880.0, 0, 880.0, 0, 698.456, 0, 698.456, 0, 783.991, 0, 783.991, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 493.883, 0, 493.883, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 391.995, 0, 391.995, 0, 415.305, 0, 415.305, 0, 440.0, 0, 440.0, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 440.0, 0, 440.0, 0, 493.883, 0, 493.883, 0, 880.0, 0, 880.0, 0, 880.0, 0, 880.0, 0, 880.0, 0, 880.0, 0, 783.991, 0, 783.991, 0, 698.456, 0, 698.456, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 440.0, 0, 440.0, 0, 391.995, 0, 391.995, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 391.995, 0, 391.995, 0, 415.305, 0, 415.305, 0, 440.0, 0, 440.0, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 440.0, 0, 440.0, 0, 493.883, 0, 493.883, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 659.255, 0, 659.255, 0, 587.33, 0, 587.33, 0, 523.251, 0, 523.251, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 391.995, 0, 391.995, 0, 415.305, 0, 415.305, 0, 440.0, 0, 440.0, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 440.0, 0, 440.0, 0, 493.883, 0, 493.883, 0, 880.0, 0, 880.0, 0, 880.0, 0, 880.0, 0, 880.0, 0, 880.0, 0, 783.991, 0, 783.991, 0, 698.456, 0, 698.456, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 440.0, 0, 440.0, 0, 391.995, 0, 391.995, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 391.995, 0, 391.995, 0, 415.305, 0, 415.305, 0, 440.0, 0, 440.0, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 440.0, 0, 440.0, 0, 493.883, 0, 493.883, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 659.255, 0, 659.255, 0, 587.33, 0, 587.33, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 440.0, 0, 440.0, 0, 391.995, 0, 391.995, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 523.251, 0, 587.33, 0, 587.33, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 440.0, 0, 440.0, 0, 391.995, 0, 391.995, 0, 659.255, 0, 659.255, 0, 659.255, 0, 659.255, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 659.255, 0, 659.255, 0, 783.991, 0, 783.991, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 391.995, 0, 391.995, 0, 415.305, 0, 415.305, 0, 440.0, 0, 440.0, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 440.0, 0, 440.0, 0, 493.883, 0, 493.883, 0, 880.0, 0, 880.0, 0, 880.0, 0, 880.0, 0, 880.0, 0, 880.0, 0, 783.991, 0, 783.991, 0, 698.456, 0, 698.456, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 440.0, 0, 440.0, 0, 391.995, 0, 391.995, 0, 659.255, 0, 659.255, 0, 523.251, 0, 523.251, 0, 391.995, 0, 391.995, 0, 415.305, 0, 415.305, 0, 440.0, 0, 440.0, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 440.0, 0, 440.0, 0, 493.883, 0, 493.883, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 698.456, 0, 659.255, 0, 659.255, 0, 587.33, 0, 587.33, 0, 523.251, 0, 523.251, 0, 1318.51, 1318.51};
int noteDurations[1200]={881, 50, 38, 50, 125, 50, 138, 50, 38, 50, 125, 50, 675, 50, 225, 50, 212, 50, 225, 50, 125, 50, 138, 50, 38, 50, 125, 50, 75, 50, 75, 50, 62, 50, 138, 50, 38, 50, 125, 50, 138, 62, 25, 50, 38, 50, 225, 50, 212, 50, 225, 50, 225, 50, 125, 50, 138, 50, 38, 50, 125, 50, 75, 50, 62, 50, 75, 50, 125, 50, 50, 50, 125, 50, 125, 50, 50, 50, 38, 50, 400, 50, 38, 50, 38, 50, 50, 50, 125, 50, 125, 50, 50, 50, 38, 50, 125, 50, 38, 50, 50, 62, 200, 50, 50, 50, 38, 50, 38, 50, 125, 50, 138, 50, 125, 50, 38, 50, 500, 50, 38, 50, 38, 50, 38, 50, 138, 50, 125, 50, 38, 50, 50, 50, 125, 50, 38, 50, 38, 50, 225, 62, 212, 50, 212, 50, 850, 50, 50, 62, 25, 50, 38, 50, 138, 50, 125, 50, 38, 50, 38, 50, 138, 50, 38, 50, 38, 50, 225, 50, 38, 50, 38, 50, 50, 50, 125, 50, 125, 50, 138, 50, 38, 50, 488, 50, 38, 50, 50, 50, 38, 50, 125, 50, 138, 50, 38, 50, 38, 50, 138, 50, 38, 50, 38, 50, 225, 50, 212, 50, 225, 50, 675, 50, 38, 50, 125, 50, 138, 50, 38, 50, 125, 50, 50, 50, 125, 50, 38, 50, 312, 50, 38, 50, 138, 50, 125, 50, 38, 50, 38, 50, 762, 50, 50, 50, 125, 50, 125, 50, 50, 50, 125, 50, 38, 50, 138, 62, 25, 50, 312, 50, 38, 50, 125, 50, 138, 50, 38, 50, 125, 50, 675, 50, 225, 50, 212, 50, 225, 50, 125, 50, 138, 50, 38, 62, 125, 50, 62, 50, 75, 50, 62, 50, 138, 50, 38, 50, 125, 50, 138, 50, 38, 50, 38, 50, 225, 50, 225, 50, 212, 50, 225, 50, 125, 50, 138, 50, 38, 50, 125, 50, 75, 50, 75, 50, 62, 50, 138, 50, 38, 50, 125, 50, 138, 50, 38, 50, 38, 50, 225, 50, 38, 50, 125, 50, 225, 50, 125, 50, 50, 50, 125, 50, 38, 50, 312, 50, 75, 50, 62, 50, 75, 50, 75, 50, 62, 50, 75, 50, 38, 50, 125, 50, 50, 50, 300, 50, 50, 50, 125, 50, 225, 50, 125, 50, 38, 50, 138, 50, 38, 50, 312, 50, 38, 50, 125, 50, 50, 50, 62, 50, 75, 50, 75, 50, 662, 50, 38, 50, 138, 50, 212, 50, 138, 50, 38, 50, 138, 50, 38, 50, 312, 50, 62, 50, 75, 50, 62, 50, 75, 50, 75, 50, 62, 50, 50, 50, 125, 50, 38, 50, 312, 50, 38, 50, 138, 50, 212, 50, 138, 50, 38, 50, 125, 50, 50, 50, 300, 50, 50, 50, 125, 50, 38, 50, 75, 50, 62, 50, 75, 50, 675, 50, 38, 50, 125, 50, 138, 50, 38, 50, 125, 50, 50, 50, 125, 50, 38, 50, 312, 50, 38, 50, 138, 50, 125, 50, 38, 50, 50, 50, 762, 50, 38, 50, 125, 50, 138, 50, 38, 50, 125, 50, 38, 50, 138, 50, 38, 50, 312, 50, 38, 50, 138, 50, 125, 50, 38, 50, 138, 50, 662, 50, 50, 50, 125, 50, 225, 50, 125, 50, 38, 50, 138, 50, 38, 50, 312, 50, 62, 50, 75, 50, 75, 50, 62, 50, 75, 50, 62, 50, 50, 50, 125, 50, 38, 50, 312, 50, 38, 50, 138, 62, 200, 50, 138, 50, 38, 50, 125, 50, 50, 50, 300, 50, 50, 50, 125, 50, 38, 50, 75, 50, 75, 50, 62, 50, 375};


#include "driver/ledc.h"
#include "esp_err.h"

#define LEDC_TIMER              LEDC_TIMER_0
#define LEDC_MODE               LEDC_LOW_SPEED_MODE
#define LEDC_OUTPUT_IO          (5) // Define the output GPIO
#define LEDC_CHANNEL            LEDC_CHANNEL_0
#define LEDC_DUTY_RES           LEDC_TIMER_13_BIT // Set duty resolution to 13 bits
#define LEDC_DUTY               (4095) // Set duty to 50%. ((2 ** 13) - 1) * 50% = 4095
#define LEDC_FREQUENCY          (5000) // Frequency in Hertz. Set frequency at 5 kHz

static void example_ledc_init(void)
{
  // Prepare and then apply the LEDC PWM timer configuration
  ledc_timer_config_t ledc_timer = {
      .speed_mode       = LEDC_MODE,
      .duty_resolution  = LEDC_DUTY_RES,
      .timer_num        = LEDC_TIMER,
      .freq_hz          = LEDC_FREQUENCY,  // Set output frequency at 5 kHz
      .clk_cfg          = LEDC_AUTO_CLK
  };
  ESP_ERROR_CHECK(ledc_timer_config(&ledc_timer));

  // Prepare and then apply the LEDC PWM channel configuration
  ledc_channel_config_t ledc_channel = {
      .gpio_num       = LEDC_OUTPUT_IO,
      .speed_mode     = LEDC_MODE,
      .channel        = LEDC_CHANNEL,
      .intr_type      = LEDC_INTR_DISABLE,
      .timer_sel      = LEDC_TIMER,
      .duty           = 0, // Set duty to 0%
      .hpoint         = 0
  };
  ESP_ERROR_CHECK(ledc_channel_config(&ledc_channel));
}

extern "C" void app_main() {
  // Set the LEDC peripheral configuration
  example_ledc_init();
  // Set duty to 50%
  ESP_ERROR_CHECK(ledc_set_duty(LEDC_MODE, LEDC_CHANNEL, LEDC_DUTY));
  // Update duty to apply the new value
  ESP_ERROR_CHECK(ledc_update_duty(LEDC_MODE, LEDC_CHANNEL));

  MidiFile midifile;
  {
    std::stringstream stream;
//    stream.write((char*)twinkle_mid, sizeof twinkle_mid);
    stream.write((char*)SuperMario_mid, sizeof SuperMario_mid);
    midifile.read(stream);
  }
  midifile.doTimeAnalysis();
  midifile.linkNotePairs();

  printf("TPQ: %d\r\n", midifile.getTicksPerQuarterNote());
  printf("Tracks: %d\r\n", midifile.getTrackCount());

  int tickLast = 0;
  for(;;){
    int track = 1;
    for (int event=0; event<midifile[track].size(); event++) {
      auto& e = midifile[track][event];
      int key = e.getKeyNumber();
      int tick = e.tick;
      tick -= tickLast;
      tickLast = e.tick;

      int ms = midifile.getTimeInSeconds(tick) * 1000;

      if (key != -1) {
        if (e.isNoteOn()) {
          printf("NoteOn: key: %d, ms: %d\r\n", key, ms);
          ledc_set_freq(LEDC_MODE, LEDC_TIMER, fre_table[key - 21]);
          ledc_timer_resume(LEDC_MODE, LEDC_TIMER);
        }
        if (e.isNoteOff()) {
          printf("NoteOff: key: %d, ms: %d\r\n", key, ms);
//          ledc_stop(LEDC_MODE, LEDC_CHANNEL_0, 0);
          ledc_timer_pause(LEDC_MODE, LEDC_TIMER);
        }
      }
      std::this_thread::sleep_for(std::chrono::milliseconds(ms));
    }
  }
}
